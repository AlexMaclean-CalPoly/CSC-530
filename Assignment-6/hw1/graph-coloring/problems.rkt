#lang racket

(require racket/runtime-path "graph.rkt")

(provide problems ; (listof problem?)
         (struct-out problem)
         problem->graph ; (->* (problem?) [path-string?] graph/c)
         )

; A problem description includes the instance name, the number of graph vertices and edges, 
; the graph's chromatic number, and the problem difficulty (easy, medium, or hard).
(struct problem (name nodes edges colors difficulty) #:transparent)

; We assume that the problem instances are in the data folder.
(define-runtime-path data (build-path "data"))

; Returns a graph/c corresponding to the given problem instance.
(define (problem->graph p [path data])
  (read-graph (build-path path (string-append (problem-name p) ".col"))))


; Lists descriptions of easy, medium and hard graph coloring instances from 
; https://sites.google.com/site/graphcoloring/vertex-coloring.
(define problems
  (list
   (problem "1-FullIns_3" 30 100 4 'easy)
   (problem "1-Insertions_4" 67 232 5 'easy)
   (problem "2-FullIns_3" 52 201 5 'easy)
   (problem "2-Insertions_3" 37 72 4 'easy)
   (problem "3-Insertions_3" 56 110 4 'easy)
   (problem "anna" 138 493 11 'easy)
   (problem "ash331GPIA" 662 4181 4 'easy)
   (problem "david" 87 406 11 'easy)
   (problem "DSJC125.1" 125 736 5 'easy)
   (problem "DSJR500.1" 500 3555 12 'easy)
   (problem "fpsol2.i.1" 496 11654 65 'easy)
   (problem "fpsol2.i.2" 451 8691 30 'easy)
   (problem "fpsol2.i.3" 425 8688 30 'easy)
   (problem "games120" 120 638 9 'easy)
   (problem "huck" 74 301 11 'easy)
   (problem "inithx.i.1" 864 18707 54 'easy)
   (problem "inithx.i.2" 645 13979 31 'easy)
   (problem "inithx.i.3" 621 13969 31 'easy)
   (problem "jean" 80 254 10 'easy)
   (problem "le450_25a" 450 8260 25 'easy)
   (problem "le450_25b" 450 8263 25 'easy)
   (problem "le450_5c" 450 9803 5 'easy)
   (problem "le450_5d" 450 9757 5 'easy)
   (problem "miles1000" 128 3216 42 'easy)
   (problem "miles1500" 128 5198 73 'easy)
   (problem "miles250" 128 387 8 'easy)
   (problem "miles500" 128 1170 20 'easy)
   (problem "miles750" 128 2113 31 'easy)
   (problem "mug88_1" 88 146 4 'easy)
   (problem "mug88_25" 88 146 4 'easy)
   (problem "mulsol.i.1" 197 3925 49 'easy)
   (problem "mulsol.i.2" 188 3885 31 'easy)
   (problem "mulsol.i.3" 184 3916 31 'easy)
   (problem "mulsol.i.4" 185 3946 31 'easy)
   (problem "mulsol.i.5" 186 3973 31 'easy)
   (problem "myciel3" 11 20 4 'easy)
   (problem "myciel4" 23 71 5 'easy)
   (problem "myciel5" 47 236 6 'easy)
   (problem "queen5_5" 25 160 5 'easy)
   (problem "queen6_6" 36 290 7 'easy)
   (problem "queen7_7" 49 476 7 'easy)
   (problem "queen8_12" 96 1368 12 'easy)
   (problem "queen8_8" 64 728 9 'easy)
   (problem "queen9_9" 81 1056 10 'easy)
   (problem "r1000.1" 1000 14378 20 'easy)
   (problem "r125.1" 125 209 5 'easy)
   (problem "r125.1c" 125 7501 46 'easy)
   (problem "r125.5" 125 3838 36 'easy)
   (problem "r250.1" 250 867 8 'easy)
   (problem "r250.1c" 250 30227 64 'easy)  
   (problem "school1" 385 19095 14 'easy)
   (problem "will199GPIA" 701 6772 7 'easy)
   (problem "zeroin.i.1" 211 4100 49 'easy)
   (problem "zeroin.i.2" 211 3541 30 'easy)
   (problem "zeroin.i.3" 206 3540 30 'easy)
   (problem "1-FullIns_4" 93 593 5 'medium)
   (problem "2-FullIns_4" 212 1621 6 'medium)
   (problem "3-FullIns_3" 80 346 6 'medium)
   (problem "4-FullIns_3" 114 541 7 'medium)
   (problem "5-FullIns_3" 154 792 8 'medium)
   (problem "4-Insertions_3" 79 156 4 'medium)
   (problem "ash608GPIA" 1216 7844 4 'medium)
   (problem "ash958GPIA" 1916 12506 4 'medium)
   (problem "le450_15a" 450 8168 15 'medium)
   (problem "mug100_1" 100 166 4 'medium)
   (problem "mug100_25" 100 166 4 'medium)
   (problem "wap05a" 905 43081 50 'medium)
   (problem "myciel6" 95 755 7 'medium)
   (problem "school1_nsh" 352 14612 14 'medium)
   (problem "flat300_28_0" 300 21695 28 'hard)
   (problem "r1000.5" 1000 238267 234 'hard)
   (problem "r250.5" 250 14849 65 'hard)
   (problem "DSJR500.5" 500 58862 122 'hard)
   (problem "DSJR500.1c" 500 121275 85 'hard)
   (problem "DSJC125.5" 125 3891 17 'hard)
   (problem "DSJC125.9" 125 6961 44 'hard)
   (problem "DSJC250.9" 250 27897 72 'hard)
   (problem "queen10_10" 100 2940 11 'hard)
   (problem "queen11_11" 121 3960 11 'hard)
   (problem "queen12_12" 144 5192 12 'hard)
   (problem "queen13_13" 169 6656 13 'hard)
   (problem "queen14_14" 196 4186 14 'hard)
   (problem "queen15_15" 225 5180 15 'hard))
  )

(define (string->problems str difficulty)
  (filter-map 
   (lambda (str) 
     (let ([cols (string-split str "\t" #:trim? #f)])
       (and (not (null? cols))
            (problem (list-ref cols 0) 
                     (string->number (list-ref cols 1))
                     (string->number (list-ref cols 2))
                     (string->number (list-ref cols 9))
                     difficulty))))
   (string-split str "\n")))