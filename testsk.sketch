int INTEGER = 0;
int BOOLEAN = 1;

int ADD_OP = 0;
int SUB_OP = 1;

struct MultiType {
    int val;
    int flag;
    bit bval;
}

MultiType binOpMT(MultiType a, MultiType b, int op) {
    if (op == ADD_OP)
        return addMT(a, b);

    if (op == SUB_OP)
        return subMT(a, b);

}

MultiType addMT(MultiType a, MultiType b) {
    assert a.flag == b.flag; // same types can be added
    if(a.flag == INTEGER) // add for integers
        return new MultiType(val=a.val+b.val, flag = INTEGER);
}

MultiType subMT(MultiType a, MultiType b) {
    assert a.flag == b.flag; // same types can be added
    if(a.flag == INTEGER) // add for integers
        return new MultiType(val=a.val-b.val, flag = INTEGER);
}

bit MTEquals(MultiType a, MultiType b) {
    if (a.flag == b.flag && a.flag == INTEGER)
        return a.val == b.val;
    if (a.flag == b.flag && a.flag == BOOLEAN)
        return a.bval == b.bval;

    return 0;
}

harness void main(int N, int[N] poly) {
    int totalCost = 0;
}
